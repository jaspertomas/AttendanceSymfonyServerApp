<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('AccountEntry', 'doctrine');

/**
 * BaseAccountEntry
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $account_id
 * @property date $date
 * @property string $description
 * @property decimal $amount
 * @property timestamp $created_at
 * @property string $notes
 * @property Account $Account
 * 
 * @method integer      getId()          Returns the current record's "id" value
 * @method integer      getAccount_id()  Returns the current record's "account_id" value
 * @method date         getDate()        Returns the current record's "date" value
 * @method string       getDescription() Returns the current record's "description" value
 * @method decimal      getAmount()      Returns the current record's "amount" value
 * @method timestamp    getCreated_at()  Returns the current record's "created_at" value
 * @method string       getNotes()       Returns the current record's "notes" value
 * @method Account      getAccount()     Returns the current record's "Account" value
 * @method AccountEntry setId()          Sets the current record's "id" value
 * @method AccountEntry setAccount_id()  Sets the current record's "account_id" value
 * @method AccountEntry setDate()        Sets the current record's "date" value
 * @method AccountEntry setDescription() Sets the current record's "description" value
 * @method AccountEntry setAmount()      Sets the current record's "amount" value
 * @method AccountEntry setCreated_at()  Sets the current record's "created_at" value
 * @method AccountEntry setNotes()       Sets the current record's "notes" value
 * @method AccountEntry setAccount()     Sets the current record's "Account" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAccountEntry extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('account_entry');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('account_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('amount', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('notes', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Account', array(
             'local' => 'account_id',
             'foreign' => 'id'));
    }
}